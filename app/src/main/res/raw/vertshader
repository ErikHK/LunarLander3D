attribute vec3 inPosition;
attribute vec3 inNormal;
attribute vec2 inTexCoord;

varying vec3 exNormal;
varying mat4 cammat;
varying vec4 col;
varying vec2 texCoord;

varying vec3 inPos;
varying float tf;

uniform mat4 matrix;
uniform mat4 projmatrix;
uniform mat4 cammatrix;
uniform float ang;
uniform float fuel;
uniform int draw_hud;
uniform int drawterrain2;
uniform int draw_gameover;
uniform float t;
uniform int draw_skydome;
uniform int draw_fuelbar_background;
uniform int draw_fuelbar;
uniform int draw_speedometer;
mat4 test;

uniform vec3 spaceship_speed;
mat3 normalMatrix = mat3(cammatrix * matrix);
vec3 transformedNormal = normalMatrix * inNormal;

void main(){

  const vec3 light = vec3(0.58, 0.58, 0.58);
  float shade;
  shade = dot(normalize(inNormal), light);
  col = vec4(shade);
  vec3 pos = vec3(inPosition);

  exNormal = transformedNormal;

  if(pos.y < -0.4 && drawterrain2==1)
  {
    gl_Position = projmatrix*cammatrix*matrix*vec4(pos.x, .5*sin(pos.x/3.0 + 2.0*t), pos.z, 1.0);
    //gl_Normal.y = 1.0;
    //inNormal.y = 1.0;
  }
  else if(draw_hud==1)
  {
    //gl_Position = projmatrix*vec4(pos.x*6.0*fuel/100.0+13.0, pos.y*2.0+8.0, pos.z-20.0, 1.0);
    //gl_Position = vec4(pos.x*2., pos.y*2., pos.z-0.0, 1.0);
    if(draw_fuelbar_background==1)
      gl_Position = vec4(pos.x*.4 + .7, pos.y*.2+.8, pos.z-0.0, 1.0);
    else if(draw_fuelbar==1)
      gl_Position = vec4(pos.x*.4*fuel/100.0+.5 + .2*fuel/100.0, pos.y*.2+.8, pos.z-0.0, 1.0);
    else if(draw_speedometer==1)
      gl_Position = vec4(pos.x*.4*abs(spaceship_speed.y*10.0) - .7, pos.y*.2+.8, pos.z-0.0, 1.0);
    //gl_Position = vec4(pos.x, pos.y, pos.z, 1.0);
  }
  else if(draw_gameover==1)
  {
    gl_Position = vec4(pos.x*2., pos.y*2., pos.z-1.0, 1.0);
  }
  else if(draw_skydome==1)
    gl_Position = vec4(pos.x*2., pos.y*2., pos.z, 1.0);
  else
    gl_Position = projmatrix*cammatrix*matrix*vec4(pos, 1.0);

  cammat = cammatrix;

  inPos = inPosition;

  texCoord = inTexCoord;
  tf = t;

}