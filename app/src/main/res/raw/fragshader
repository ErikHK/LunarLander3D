precision mediump float;
uniform vec4 u_color;

uniform mat4 cammatrix;
uniform int drawterrain;
//mat3 lightCamMatrix;

uniform vec3 spaceship_pos;
uniform vec3 landing_point_pos;

varying vec3 inPos;

varying mat4 cammat;
varying vec3 exNormal;
varying vec4 col;

vec4 cam_vector = vec4(.6,.6,.6,1);
vec3 n;
vec3 s;

void main(){
  //lightCamMatrix = mat3(cammatrix);
  vec4 colors;

  n = normalize( exNormal );
  s = normalize(mat3(cammat)*vec3(-10,20,1));

  //float lambert = pow(dot(n,s),2)-.001;
  float lambert = dot(n,s);

  float f = smoothstep(.05, .9, lambert);
  vec4  pixcolor1 = vec4(.6, .05, .05, 1);
  vec4  pixcolor2 = vec4(.8, .3, .3, 1);
  colors = mix(pixcolor1, pixcolor2, f);

  if(drawterrain==1)
  {
    //colors = mix(pixcolor1, pixcolor2, f) + vec4(.1, .4, .5, 1);

    //f = smoothstep(.05, .9, lambert);
    //pixcolor1 = vec4(.1, .4, .5, 1);
    //pixcolor2 = vec4(.1, .1, .1, 1);
    //colors = mix(pixcolor1, pixcolor2, f);
    if(((spaceship_pos.x-inPos.x*1.0)*(spaceship_pos.x-inPos.x*1.0) +
    			(spaceship_pos.z-inPos.z*1.0)*(spaceship_pos.z-inPos.z*1.0) < .2))
    				colors -= vec4(.4,.4,.4,0);

    colors = colors + vec4(.6, .6, .6, 1)*lambert;
  }

  gl_FragColor = colors;

}