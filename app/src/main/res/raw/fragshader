precision mediump float;
uniform vec4 u_color;

uniform mat4 cammatrix;
uniform int drawterrain;
uniform int draw_landing_point;
//mat3 lightCamMatrix;

uniform vec3 spaceship_pos;
uniform vec3 landing_point_pos;

varying vec3 inPos;

varying mat4 cammat;
varying vec3 exNormal;
varying vec4 col;

vec4 cam_vector = vec4(.6,.6,.6,1);
vec3 n;
vec3 s;

void main(){
  //lightCamMatrix = mat3(cammatrix);
  vec4 colors;

  n = normalize( exNormal );
  s = normalize(mat3(cammat)*vec3(10,50,10));

  //float lambert = pow(dot(n,s),2)-.001;
  float lambert = dot(n,s);

  float f = smoothstep(.05, .9, lambert);
  vec4  pixcolor1 = vec4(.6, .05, .05, 1);
  vec4  pixcolor2 = vec4(.8, .3, .3, 1);
  colors = mix(pixcolor1, pixcolor2, f);

  if(drawterrain==1)
  {
    colors = vec4(.3, .9, .3, 1)*lambert;

    if(inPos.y < 0.0)
        {
          colors = vec4(.3, .3, .8, 1);
          //gl_Normal.y = 1;
        }

    if(((spaceship_pos.x-inPos.x*1.)*(spaceship_pos.x-inPos.x*1.) +
    			(spaceship_pos.z-inPos.z*1.)*(spaceship_pos.z-inPos.z*1.) < 1.0))
    				colors -= vec4(.4,.4,.4,0);

  }

  if(draw_landing_point==1)
  {
    colors = vec4(.4, .4, .5, 1)*lambert;

    if(((spaceship_pos.x-inPos.x - landing_point_pos.x)*(spaceship_pos.x - inPos.x - landing_point_pos.x) +
        			(spaceship_pos.z - inPos.z - landing_point_pos.z)*(spaceship_pos.z - inPos.z - landing_point_pos.z) < .5))
        				colors -= vec4(.4,.4,.4,0);
  }

  gl_FragColor = colors + vec4(.2, .2, .2, 0);

}